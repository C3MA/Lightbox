
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000412  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000e  00800060  00000412  000004a6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000055  0080006e  0080006e  000004b4  2**0
                  ALLOC
  3 .stab         000018cc  00000000  00000000  000004b4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000e80  00000000  00000000  00001d80  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	2e c1       	rjmp	.+604    	; 0x270 <__vector_9>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	9e c0       	rjmp	.+316    	; 0x154 <__vector_11>
  18:	c6 c0       	rjmp	.+396    	; 0x1a6 <__vector_12>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e2 e1       	ldi	r30, 0x12	; 18
  3a:	f4 e0       	ldi	r31, 0x04	; 4
  3c:	02 c0       	rjmp	.+4      	; 0x42 <.do_copy_data_start>

0000003e <.do_copy_data_loop>:
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0

00000042 <.do_copy_data_start>:
  42:	ae 36       	cpi	r26, 0x6E	; 110
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <.do_copy_data_loop>

00000048 <__do_clear_bss>:
  48:	10 e0       	ldi	r17, 0x00	; 0
  4a:	ae e6       	ldi	r26, 0x6E	; 110
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	a3 3c       	cpi	r26, 0xC3	; 195
  54:	b1 07       	cpc	r27, r17
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	02 d0       	rcall	.+4      	; 0x5e <main>
  5a:	da c1       	rjmp	.+948    	; 0x410 <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <main>:
static uint8_t gId = 0;

static void fillActualCommand(void);

int main(void)
{
  5e:	cf e5       	ldi	r28, 0x5F	; 95
  60:	d4 e0       	ldi	r29, 0x04	; 4
  62:	de bf       	out	0x3e, r29	; 62
  64:	cd bf       	out	0x3d, r28	; 61
// Pindefenition	
	cli();
  66:	f8 94       	cli
	DDRD = (1<<PD6)|(1<<PD5);
  68:	80 e6       	ldi	r24, 0x60	; 96
  6a:	81 bb       	out	0x11, r24	; 17
	PORTD = 0x00;
  6c:	12 ba       	out	0x12, r1	; 18
	PIND = 0x00;
  6e:	10 ba       	out	0x10, r1	; 16
	PORTD |= (1 << PD6);
  70:	96 9a       	sbi	0x12, 6	; 18
	uart_init_own( UART_BAUD_SELECT(UART_BAUD_RATE,F_CPU) );
  72:	87 e0       	ldi	r24, 0x07	; 7
  74:	90 e0       	ldi	r25, 0x00	; 0
  76:	da d0       	rcall	.+436    	; 0x22c <uart_init_own>

// Interrupt fÃ¼r INT1 und INT0 intialisieren
	MCUCR |= 0x0F;
  78:	85 b7       	in	r24, 0x35	; 53
  7a:	8f 60       	ori	r24, 0x0F	; 15
  7c:	85 bf       	out	0x35, r24	; 53
	
	sei();
  7e:	78 94       	sei
	
	
	/********* PWD *********/
	DDRB  = 0xff;                  // use all pins on PortB for output 
  80:	8f ef       	ldi	r24, 0xFF	; 255
  82:	87 bb       	out	0x17, r24	; 23
    PORTB = 0xff;                  // set output high -> turn all LEDs off
  84:	88 bb       	out	0x18, r24	; 24
	// set OC1A pin as output, required for output toggling
    DDRB |= _BV(PB1); // red
  86:	b9 9a       	sbi	0x17, 1	; 23
	DDRB |= _BV(PB2); // green
  88:	ba 9a       	sbi	0x17, 2	; 23
	DDRB |= _BV(PB3); // blue
  8a:	bb 9a       	sbi	0x17, 3	; 23
	
	/* PWM-Quelle: http://www.mikrocontroller.net/topic/158322 */
	
	// Init Pins
	PORTB &=~ ((1 << PB1)  | (1 << PB2)  | (1 << PB3));  
  8c:	88 b3       	in	r24, 0x18	; 24
  8e:	81 7f       	andi	r24, 0xF1	; 241
  90:	88 bb       	out	0x18, r24	; 24
	DDRB  |=  ((1 << DDB1) | (1 << DDB2) | (1 << DDB3));  
  92:	87 b3       	in	r24, 0x17	; 23
  94:	8e 60       	ori	r24, 0x0E	; 14
  96:	87 bb       	out	0x17, r24	; 23
	
	// Init PWM Systems
	TCCR1A |= (1 << COM1A1) | (1 << COM1A0) | (1 << COM1B1) | (1 << COM1B0) | (1 << WGM10);
  98:	8f b5       	in	r24, 0x2f	; 47
  9a:	81 6f       	ori	r24, 0xF1	; 241
  9c:	8f bd       	out	0x2f, r24	; 47
	TCCR1B |= (1 << CS10);
  9e:	8e b5       	in	r24, 0x2e	; 46
  a0:	81 60       	ori	r24, 0x01	; 1
  a2:	8e bd       	out	0x2e, r24	; 46
	TCCR2  |= (1 << COM21) | (1 << COM20) | (1 << WGM20) | (1 << CS20);
  a4:	85 b5       	in	r24, 0x25	; 37
  a6:	81 67       	ori	r24, 0x71	; 113
  a8:	85 bd       	out	0x25, r24	; 37
	
	int red, green, blue, id;
	int i;
	
	PORTD |= (1 << PD5);
  aa:	95 9a       	sbi	0x12, 5	; 18
	uart_send_s("Hallo Welt\r\n");
  ac:	80 e6       	ldi	r24, 0x60	; 96
  ae:	90 e0       	ldi	r25, 0x00	; 0
  b0:	b1 d0       	rcall	.+354    	; 0x214 <uart_send_s>
{
	int i;
	unsigned int c;
	
	// Clear the buffer
	memset(gCommand, 0, COMMAND_LENGTH);
  b2:	e0 e7       	ldi	r30, 0x70	; 112
  b4:	f0 e0       	ldi	r31, 0x00	; 0
  b6:	8a e0       	ldi	r24, 0x0A	; 10
  b8:	df 01       	movw	r26, r30
  ba:	1d 92       	st	X+, r1
  bc:	8a 95       	dec	r24
  be:	e9 f7       	brne	.-6      	; 0xba <main+0x5c>
  c0:	00 e0       	ldi	r16, 0x00	; 0
  c2:	10 e0       	ldi	r17, 0x00	; 0
  c4:	ef 01       	movw	r28, r30
	
	for(i = 0; i < COMMAND_LENGTH; i++) {
		c = uart_getc();
  c6:	b9 d0       	rcall	.+370    	; 0x23a <uart_getc>
		if ( c & UART_NO_DATA ) {
  c8:	90 ff       	sbrs	r25, 0
  ca:	04 c0       	rjmp	.+8      	; 0xd4 <main+0x76>
			// decrement, so the actual position could be filled at the next time.
			i--;
  cc:	01 50       	subi	r16, 0x01	; 1
  ce:	10 40       	sbci	r17, 0x00	; 0
  d0:	21 97       	sbiw	r28, 0x01	; 1
  d2:	05 c0       	rjmp	.+10     	; 0xde <main+0x80>
		} else {
			gCommand[i] = c;
  d4:	88 83       	st	Y, r24
			
			// check if command begins with a "p"
			if (gCommand[0] != 'p')
  d6:	80 91 70 00 	lds	r24, 0x0070
  da:	80 37       	cpi	r24, 0x70	; 112
  dc:	31 f4       	brne	.+12     	; 0xea <main+0x8c>
	unsigned int c;
	
	// Clear the buffer
	memset(gCommand, 0, COMMAND_LENGTH);
	
	for(i = 0; i < COMMAND_LENGTH; i++) {
  de:	0f 5f       	subi	r16, 0xFF	; 255
  e0:	1f 4f       	sbci	r17, 0xFF	; 255
  e2:	21 96       	adiw	r28, 0x01	; 1
  e4:	0a 30       	cpi	r16, 0x0A	; 10
  e6:	11 05       	cpc	r17, r1
  e8:	74 f3       	brlt	.-36     	; 0xc6 <main+0x68>
		// Check if programm-button was pressed. (see: gProgrammode)
				
		
		fillActualCommand();
		
		switch (gCommand[1]) {
  ea:	80 91 71 00 	lds	r24, 0x0071
  ee:	89 36       	cpi	r24, 0x69	; 105
  f0:	01 f1       	breq	.+64     	; 0x132 <main+0xd4>
  f2:	87 37       	cpi	r24, 0x77	; 119
  f4:	19 f5       	brne	.+70     	; 0x13c <main+0xde>
			case 'w': // check for an "w" as write
				id = decodeHex(gCommand[8],gCommand[9]);
  f6:	60 91 79 00 	lds	r22, 0x0079
  fa:	80 91 78 00 	lds	r24, 0x0078
  fe:	47 d1       	rcall	.+654    	; 0x38e <decodeHex>
				if (gId != id)
 100:	20 91 6f 00 	lds	r18, 0x006F
 104:	33 27       	eor	r19, r19
 106:	28 17       	cp	r18, r24
 108:	39 07       	cpc	r19, r25
 10a:	99 f6       	brne	.-90     	; 0xb2 <main+0x54>
					continue;
				red = decodeHex(gCommand[2],gCommand[3]);
 10c:	60 91 73 00 	lds	r22, 0x0073
 110:	80 91 72 00 	lds	r24, 0x0072
 114:	3c d1       	rcall	.+632    	; 0x38e <decodeHex>
 116:	5c 01       	movw	r10, r24
				green = decodeHex(gCommand[4],gCommand[5]);
 118:	60 91 75 00 	lds	r22, 0x0075
 11c:	80 91 74 00 	lds	r24, 0x0074
 120:	36 d1       	rcall	.+620    	; 0x38e <decodeHex>
 122:	6c 01       	movw	r12, r24
				blue = decodeHex(gCommand[6],gCommand[7]);
 124:	60 91 77 00 	lds	r22, 0x0077
 128:	80 91 76 00 	lds	r24, 0x0076
 12c:	30 d1       	rcall	.+608    	; 0x38e <decodeHex>
 12e:	7c 01       	movw	r14, r24
 130:	05 c0       	rjmp	.+10     	; 0x13c <main+0xde>
				MSG(gCommand);
				MSG("\r\n");
				break;
			case 'i': // check for an "i" as initialize
				//TODO logic!
				if (gProgrammode == 0)
 132:	80 91 6e 00 	lds	r24, 0x006E
 136:	88 23       	and	r24, r24
 138:	09 f4       	brne	.+2      	; 0x13c <main+0xde>
 13a:	bb cf       	rjmp	.-138    	; 0xb2 <main+0x54>
				MSG("Unknown Parameter\r\n");
				break;
		}
		
		// do the pwm
		OCR1AL = 0xFF - red;
 13c:	8a 2d       	mov	r24, r10
 13e:	80 95       	com	r24
 140:	8a bd       	out	0x2a, r24	; 42
		OCR1BL = 0xFF - green;
 142:	8c 2d       	mov	r24, r12
 144:	80 95       	com	r24
 146:	88 bd       	out	0x28, r24	; 40
		OCR2   = 0xFF - blue;		
 148:	8e 2d       	mov	r24, r14
 14a:	80 95       	com	r24
 14c:	83 bd       	out	0x23, r24	; 35
 14e:	b1 cf       	rjmp	.-158    	; 0xb2 <main+0x54>

00000150 <uart_send_c>:
static volatile unsigned char UART_LastRxError;


void uart_send_c(unsigned char c)
{
	UDR = c;
 150:	8c b9       	out	0x0c, r24	; 12
 152:	08 95       	ret

00000154 <__vector_11>:
}

ISR(USART_RXC_vect)
{	
 154:	1f 92       	push	r1
 156:	0f 92       	push	r0
 158:	0f b6       	in	r0, 0x3f	; 63
 15a:	0f 92       	push	r0
 15c:	11 24       	eor	r1, r1
 15e:	2f 93       	push	r18
 160:	8f 93       	push	r24
 162:	9f 93       	push	r25
 164:	ef 93       	push	r30
 166:	ff 93       	push	r31
	unsigned char tmphead;
	unsigned char data;
	unsigned char usr;
	unsigned char lastRxError;
    // This registers are used on the atmega 8
	usr  = UCSRA;
 168:	9b b1       	in	r25, 0x0b	; 11
	
	data = UDR;
 16a:	2c b1       	in	r18, 0x0c	; 12
	   
	lastRxError = (usr & (_BV(FE)|_BV(DOR)) ); // This error stuff should be reactivated
 16c:	98 71       	andi	r25, 0x18	; 24
	
    /* calculate buffer index */ 
    tmphead = ( UART_RxHead + 1) & UART_RX_BUFFER_MASK;
 16e:	e0 91 7c 00 	lds	r30, 0x007C
 172:	ef 5f       	subi	r30, 0xFF	; 255
 174:	ef 71       	andi	r30, 0x1F	; 31
    
    if ( tmphead == UART_RxTail ) {
 176:	80 91 7b 00 	lds	r24, 0x007B
 17a:	e8 17       	cp	r30, r24
 17c:	11 f4       	brne	.+4      	; 0x182 <__vector_11+0x2e>
 17e:	92 e0       	ldi	r25, 0x02	; 2
 180:	06 c0       	rjmp	.+12     	; 0x18e <__vector_11+0x3a>
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
				
    }else{
        /* store new index */
        UART_RxHead = tmphead;
 182:	e0 93 7c 00 	sts	0x007C, r30
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
 186:	ff 27       	eor	r31, r31
 188:	e1 58       	subi	r30, 0x81	; 129
 18a:	ff 4f       	sbci	r31, 0xFF	; 255
 18c:	20 83       	st	Z, r18
    }
	UART_LastRxError = lastRxError; 
 18e:	90 93 7a 00 	sts	0x007A, r25
 192:	ff 91       	pop	r31
 194:	ef 91       	pop	r30
 196:	9f 91       	pop	r25
 198:	8f 91       	pop	r24
 19a:	2f 91       	pop	r18
 19c:	0f 90       	pop	r0
 19e:	0f be       	out	0x3f, r0	; 63
 1a0:	0f 90       	pop	r0
 1a2:	1f 90       	pop	r1
 1a4:	18 95       	reti

000001a6 <__vector_12>:
	
}

ISR(SIG_UART_DATA)
{
 1a6:	1f 92       	push	r1
 1a8:	0f 92       	push	r0
 1aa:	0f b6       	in	r0, 0x3f	; 63
 1ac:	0f 92       	push	r0
 1ae:	11 24       	eor	r1, r1
 1b0:	8f 93       	push	r24
 1b2:	9f 93       	push	r25
 1b4:	ef 93       	push	r30
 1b6:	ff 93       	push	r31
	unsigned char tmptail;
	
    
    if ( UART_TxHead != UART_TxTail) {
 1b8:	90 91 7e 00 	lds	r25, 0x007E
 1bc:	80 91 7d 00 	lds	r24, 0x007D
 1c0:	98 17       	cp	r25, r24
 1c2:	61 f0       	breq	.+24     	; 0x1dc <__vector_12+0x36>
        /* calculate and store new buffer index */
        tmptail = (UART_TxTail + 1) & UART_TX_BUFFER_MASK;
 1c4:	e0 91 7d 00 	lds	r30, 0x007D
 1c8:	ef 5f       	subi	r30, 0xFF	; 255
 1ca:	ef 71       	andi	r30, 0x1F	; 31
        UART_TxTail = tmptail;
 1cc:	e0 93 7d 00 	sts	0x007D, r30
        /* get one byte from buffer and write it to UART */
        UDR = UART_TxBuf[tmptail];  /* start transmission */
 1d0:	ff 27       	eor	r31, r31
 1d2:	e1 56       	subi	r30, 0x61	; 97
 1d4:	ff 4f       	sbci	r31, 0xFF	; 255
 1d6:	80 81       	ld	r24, Z
 1d8:	8c b9       	out	0x0c, r24	; 12
 1da:	01 c0       	rjmp	.+2      	; 0x1de <__vector_12+0x38>
    }else{
        /* tx buffer empty, disable UDRE interrupt */
        UCSRB &= ~_BV(UDRIE);
 1dc:	55 98       	cbi	0x0a, 5	; 10
 1de:	ff 91       	pop	r31
 1e0:	ef 91       	pop	r30
 1e2:	9f 91       	pop	r25
 1e4:	8f 91       	pop	r24
 1e6:	0f 90       	pop	r0
 1e8:	0f be       	out	0x3f, r0	; 63
 1ea:	0f 90       	pop	r0
 1ec:	1f 90       	pop	r1
 1ee:	18 95       	reti

000001f0 <uart_putc>:
 Purpose:  write byte to ringbuffer for transmitting via UART
 Input:    byte to be transmitted
 Returns:  none          
 **************************************************************************/
extern void uart_putc(unsigned char data)
{
 1f0:	28 2f       	mov	r18, r24
    unsigned char tmphead;
	
    
    tmphead  = (UART_TxHead + 1) & UART_TX_BUFFER_MASK;
 1f2:	90 91 7e 00 	lds	r25, 0x007E
 1f6:	9f 5f       	subi	r25, 0xFF	; 255
 1f8:	9f 71       	andi	r25, 0x1F	; 31
    
    while ( tmphead == UART_TxTail ){
 1fa:	80 91 7d 00 	lds	r24, 0x007D
 1fe:	98 17       	cp	r25, r24
 200:	e1 f3       	breq	.-8      	; 0x1fa <uart_putc+0xa>
        ;/* wait for free space in buffer */
    }
    
    UART_TxBuf[tmphead] = data;
 202:	e9 2f       	mov	r30, r25
 204:	ff 27       	eor	r31, r31
 206:	e1 56       	subi	r30, 0x61	; 97
 208:	ff 4f       	sbci	r31, 0xFF	; 255
 20a:	20 83       	st	Z, r18
    UART_TxHead = tmphead;
 20c:	90 93 7e 00 	sts	0x007E, r25
	
    /* enable UDRE interrupt */
    UCSRB    |= _BV(UDRIE);
 210:	55 9a       	sbi	0x0a, 5	; 10
 212:	08 95       	ret

00000214 <uart_send_s>:
	
}/* uart_putc */

extern void uart_send_s(const char *s)
{
 214:	cf 93       	push	r28
 216:	df 93       	push	r29
 218:	ec 01       	movw	r28, r24
 21a:	02 c0       	rjmp	.+4      	; 0x220 <uart_send_s+0xc>
	while (*s > 0)
		uart_putc(*s++);
 21c:	21 96       	adiw	r28, 0x01	; 1
 21e:	e8 df       	rcall	.-48     	; 0x1f0 <uart_putc>
	
}/* uart_putc */

extern void uart_send_s(const char *s)
{
	while (*s > 0)
 220:	88 81       	ld	r24, Y
 222:	88 23       	and	r24, r24
 224:	d9 f7       	brne	.-10     	; 0x21c <uart_send_s+0x8>
 226:	df 91       	pop	r29
 228:	cf 91       	pop	r28
 22a:	08 95       	ret

0000022c <uart_init_own>:
		uart_putc(*s++);
}

extern int uart_init_own(const int baudrate)
{
	UCSRB |= (1 << RXCIE) | (1 << RXEN) | (1 << TXEN);
 22c:	2a b1       	in	r18, 0x0a	; 10
 22e:	28 69       	ori	r18, 0x98	; 152
 230:	2a b9       	out	0x0a, r18	; 10
	UBRRL = baudrate;
 232:	89 b9       	out	0x09, r24	; 9
	return 0;
}
 234:	80 e0       	ldi	r24, 0x00	; 0
 236:	90 e0       	ldi	r25, 0x00	; 0
 238:	08 95       	ret

0000023a <uart_getc>:
{    
    unsigned char tmptail;
    unsigned char data;
	
	
    if ( UART_RxHead == UART_RxTail ) {
 23a:	90 91 7c 00 	lds	r25, 0x007C
 23e:	80 91 7b 00 	lds	r24, 0x007B
 242:	98 17       	cp	r25, r24
 244:	19 f4       	brne	.+6      	; 0x24c <uart_getc+0x12>
 246:	80 e0       	ldi	r24, 0x00	; 0
 248:	91 e0       	ldi	r25, 0x01	; 1
 24a:	08 95       	ret
        return UART_NO_DATA;   /* no data available */
    }
    
    /* calculate /store buffer index */
    tmptail = (UART_RxTail + 1) & UART_RX_BUFFER_MASK;
 24c:	e0 91 7b 00 	lds	r30, 0x007B
 250:	ef 5f       	subi	r30, 0xFF	; 255
 252:	ef 71       	andi	r30, 0x1F	; 31
    UART_RxTail = tmptail; 
 254:	e0 93 7b 00 	sts	0x007B, r30
    
    /* get data from receive buffer */
    data = UART_RxBuf[tmptail];
 258:	ff 27       	eor	r31, r31
 25a:	e1 58       	subi	r30, 0x81	; 129
 25c:	ff 4f       	sbci	r31, 0xFF	; 255
 25e:	20 81       	ld	r18, Z
    
    return (UART_LastRxError << 8) + data;
 260:	80 91 7a 00 	lds	r24, 0x007A
 264:	99 27       	eor	r25, r25
 266:	98 2f       	mov	r25, r24
 268:	88 27       	eor	r24, r24
 26a:	82 0f       	add	r24, r18
 26c:	91 1d       	adc	r25, r1
	
 26e:	08 95       	ret

00000270 <__vector_9>:
// The number of times timer 0 has overflowed since the program started.
// Must be volatile or gcc will optimize away some uses of it.
volatile uint32_t timer0_overflow_count;

SIGNAL(SIG_OVERFLOW0)
{
 270:	1f 92       	push	r1
 272:	0f 92       	push	r0
 274:	0f b6       	in	r0, 0x3f	; 63
 276:	0f 92       	push	r0
 278:	11 24       	eor	r1, r1
 27a:	8f 93       	push	r24
 27c:	9f 93       	push	r25
 27e:	af 93       	push	r26
 280:	bf 93       	push	r27
	timer0_overflow_count++;
 282:	80 91 bf 00 	lds	r24, 0x00BF
 286:	90 91 c0 00 	lds	r25, 0x00C0
 28a:	a0 91 c1 00 	lds	r26, 0x00C1
 28e:	b0 91 c2 00 	lds	r27, 0x00C2
 292:	01 96       	adiw	r24, 0x01	; 1
 294:	a1 1d       	adc	r26, r1
 296:	b1 1d       	adc	r27, r1
 298:	80 93 bf 00 	sts	0x00BF, r24
 29c:	90 93 c0 00 	sts	0x00C0, r25
 2a0:	a0 93 c1 00 	sts	0x00C1, r26
 2a4:	b0 93 c2 00 	sts	0x00C2, r27
 2a8:	bf 91       	pop	r27
 2aa:	af 91       	pop	r26
 2ac:	9f 91       	pop	r25
 2ae:	8f 91       	pop	r24
 2b0:	0f 90       	pop	r0
 2b2:	0f be       	out	0x3f, r0	; 63
 2b4:	0f 90       	pop	r0
 2b6:	1f 90       	pop	r1
 2b8:	18 95       	reti

000002ba <millis>:
	// overflows too often.
	//return timer0_overflow_count * 64UL * 256UL / (F_CPU / 1000UL);
	
	// instead find 1/128th the number of clock cycles and divide by
	// 1/128th the number of clock cycles per millisecond
	return timer0_overflow_count * 64UL * 2UL / (F_CPU / 128000UL);
 2ba:	60 91 bf 00 	lds	r22, 0x00BF
 2be:	70 91 c0 00 	lds	r23, 0x00C0
 2c2:	80 91 c1 00 	lds	r24, 0x00C1
 2c6:	90 91 c2 00 	lds	r25, 0x00C2
 2ca:	27 e0       	ldi	r18, 0x07	; 7
 2cc:	66 0f       	add	r22, r22
 2ce:	77 1f       	adc	r23, r23
 2d0:	88 1f       	adc	r24, r24
 2d2:	99 1f       	adc	r25, r25
 2d4:	2a 95       	dec	r18
 2d6:	d1 f7       	brne	.-12     	; 0x2cc <millis+0x12>
 2d8:	29 e3       	ldi	r18, 0x39	; 57
 2da:	30 e0       	ldi	r19, 0x00	; 0
 2dc:	40 e0       	ldi	r20, 0x00	; 0
 2de:	50 e0       	ldi	r21, 0x00	; 0
 2e0:	6d d0       	rcall	.+218    	; 0x3bc <__udivmodsi4>
}
 2e2:	ca 01       	movw	r24, r20
 2e4:	b9 01       	movw	r22, r18
 2e6:	08 95       	ret

000002e8 <delay>:

void delay(uint32_t ms) {
 2e8:	af 92       	push	r10
 2ea:	bf 92       	push	r11
 2ec:	cf 92       	push	r12
 2ee:	df 92       	push	r13
 2f0:	ef 92       	push	r14
 2f2:	ff 92       	push	r15
 2f4:	0f 93       	push	r16
 2f6:	1f 93       	push	r17
 2f8:	5b 01       	movw	r10, r22
 2fa:	6c 01       	movw	r12, r24
	uint32_t start = millis();
 2fc:	de df       	rcall	.-68     	; 0x2ba <millis>
 2fe:	7b 01       	movw	r14, r22
 300:	8c 01       	movw	r16, r24
	
	while (millis() - start < ms)
 302:	db df       	rcall	.-74     	; 0x2ba <millis>
 304:	6e 19       	sub	r22, r14
 306:	7f 09       	sbc	r23, r15
 308:	80 0b       	sbc	r24, r16
 30a:	91 0b       	sbc	r25, r17
 30c:	6a 15       	cp	r22, r10
 30e:	7b 05       	cpc	r23, r11
 310:	8c 05       	cpc	r24, r12
 312:	9d 05       	cpc	r25, r13
 314:	b0 f3       	brcs	.-20     	; 0x302 <delay+0x1a>
 316:	1f 91       	pop	r17
 318:	0f 91       	pop	r16
 31a:	ff 90       	pop	r15
 31c:	ef 90       	pop	r14
 31e:	df 90       	pop	r13
 320:	cf 90       	pop	r12
 322:	bf 90       	pop	r11
 324:	af 90       	pop	r10
 326:	08 95       	ret

00000328 <delayMicros>:
	// 2 microseconds) gives delays longer than desired.
	//delay_us(us);

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call yields a delay of approximately 1 1/8 us.
	if (--us == 0)
 328:	61 50       	subi	r22, 0x01	; 1
 32a:	70 40       	sbci	r23, 0x00	; 0
 32c:	80 40       	sbci	r24, 0x00	; 0
 32e:	90 40       	sbci	r25, 0x00	; 0
 330:	89 f0       	breq	.+34     	; 0x354 <delayMicros+0x2c>
		return;

	// the following loop takes a quarter of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2;
 332:	dc 01       	movw	r26, r24
 334:	cb 01       	movw	r24, r22
 336:	32 e0       	ldi	r19, 0x02	; 2
 338:	88 0f       	add	r24, r24
 33a:	99 1f       	adc	r25, r25
 33c:	aa 1f       	adc	r26, r26
 33e:	bb 1f       	adc	r27, r27
 340:	3a 95       	dec	r19
 342:	d1 f7       	brne	.-12     	; 0x338 <delayMicros+0x10>

	// account for the time taken in the preceeding commands.
	us -= 2;
 344:	02 97       	sbiw	r24, 0x02	; 2
 346:	a1 09       	sbc	r26, r1
 348:	b1 09       	sbc	r27, r1

	// disable interrupts, otherwise the timer 0 overflow interrupt that
	// tracks milliseconds will make us delay longer than we want.
	oldSREG = SREG;
 34a:	2f b7       	in	r18, 0x3f	; 63
	cli();
 34c:	f8 94       	cli

	// busy wait
	__asm__ __volatile__ (
 34e:	01 97       	sbiw	r24, 0x01	; 1
 350:	f1 f7       	brne	.-4      	; 0x34e <delayMicros+0x26>
		"1: sbiw %0,1" "\n\t" // 2 cycles
		"brne 1b" : "=w" (us) : "0" (us) // 2 cycles
	);

	// reenable interrupts.
	SREG = oldSREG;
 352:	2f bf       	out	0x3f, r18	; 63
 354:	08 95       	ret

00000356 <TimerInit>:
}


void TimerInit(void) {
 	timer0_overflow_count = 0;
 356:	10 92 bf 00 	sts	0x00BF, r1
 35a:	10 92 c0 00 	sts	0x00C0, r1
 35e:	10 92 c1 00 	sts	0x00C1, r1
 362:	10 92 c2 00 	sts	0x00C2, r1
 366:	08 95       	ret

00000368 <decodeSingleHex>:

#include "util.h"
#include <string.h>
#include <ctype.h>

static int decodeSingleHex(char number) {
 368:	98 2f       	mov	r25, r24
	if (number >= '0' && number <= '9') {
 36a:	80 53       	subi	r24, 0x30	; 48
 36c:	8a 30       	cpi	r24, 0x0A	; 10
 36e:	20 f4       	brcc	.+8      	; 0x378 <decodeSingleHex+0x10>
		return number - '0';
 370:	89 2f       	mov	r24, r25
 372:	99 27       	eor	r25, r25
 374:	c0 97       	sbiw	r24, 0x30	; 48
 376:	08 95       	ret
	} else if (number >= 'A' && number <= 'F') {
 378:	89 2f       	mov	r24, r25
 37a:	81 54       	subi	r24, 0x41	; 65
 37c:	86 30       	cpi	r24, 0x06	; 6
 37e:	18 f0       	brcs	.+6      	; 0x386 <decodeSingleHex+0x1e>
 380:	80 e0       	ldi	r24, 0x00	; 0
 382:	90 e0       	ldi	r25, 0x00	; 0
 384:	08 95       	ret
		return number - 'A' + 10;
 386:	89 2f       	mov	r24, r25
 388:	99 27       	eor	r25, r25
 38a:	c7 97       	sbiw	r24, 0x37	; 55
	} else {
		return 0;	// default zero is returned, so the addition won't create an error
	}
}
 38c:	08 95       	ret

0000038e <decodeHex>:

extern int decodeHex(char number1, char number2) {
 38e:	ff 92       	push	r15
 390:	0f 93       	push	r16
 392:	1f 93       	push	r17
 394:	f6 2e       	mov	r15, r22
	int value = 0;
	number1 = toupper(number1);
 396:	99 27       	eor	r25, r25
 398:	33 d0       	rcall	.+102    	; 0x400 <toupper>
 39a:	e6 df       	rcall	.-52     	; 0x368 <decodeSingleHex>
	number2 = toupper(number2);
	
	value = decodeSingleHex(number1);
	//Serial.print("Number1: ");
	//Serial.println(value);
	value = value << 4;
 39c:	8c 01       	movw	r16, r24
 39e:	84 e0       	ldi	r24, 0x04	; 4
 3a0:	00 0f       	add	r16, r16
 3a2:	11 1f       	adc	r17, r17
 3a4:	8a 95       	dec	r24
 3a6:	e1 f7       	brne	.-8      	; 0x3a0 <decodeHex+0x12>
}

extern int decodeHex(char number1, char number2) {
	int value = 0;
	number1 = toupper(number1);
	number2 = toupper(number2);
 3a8:	8f 2d       	mov	r24, r15
 3aa:	99 27       	eor	r25, r25
 3ac:	29 d0       	rcall	.+82     	; 0x400 <toupper>
 3ae:	dc df       	rcall	.-72     	; 0x368 <decodeSingleHex>
	//Serial.print("Number1: ");
	//Serial.println(value);
	value += decodeSingleHex(number2);
	//Serial.println("-------------");
	return value; 
}
 3b0:	80 0f       	add	r24, r16
 3b2:	91 1f       	adc	r25, r17
 3b4:	1f 91       	pop	r17
 3b6:	0f 91       	pop	r16
 3b8:	ff 90       	pop	r15
 3ba:	08 95       	ret

000003bc <__udivmodsi4>:
 3bc:	a1 e2       	ldi	r26, 0x21	; 33
 3be:	1a 2e       	mov	r1, r26
 3c0:	aa 1b       	sub	r26, r26
 3c2:	bb 1b       	sub	r27, r27
 3c4:	fd 01       	movw	r30, r26
 3c6:	0d c0       	rjmp	.+26     	; 0x3e2 <__udivmodsi4_ep>

000003c8 <__udivmodsi4_loop>:
 3c8:	aa 1f       	adc	r26, r26
 3ca:	bb 1f       	adc	r27, r27
 3cc:	ee 1f       	adc	r30, r30
 3ce:	ff 1f       	adc	r31, r31
 3d0:	a2 17       	cp	r26, r18
 3d2:	b3 07       	cpc	r27, r19
 3d4:	e4 07       	cpc	r30, r20
 3d6:	f5 07       	cpc	r31, r21
 3d8:	20 f0       	brcs	.+8      	; 0x3e2 <__udivmodsi4_ep>
 3da:	a2 1b       	sub	r26, r18
 3dc:	b3 0b       	sbc	r27, r19
 3de:	e4 0b       	sbc	r30, r20
 3e0:	f5 0b       	sbc	r31, r21

000003e2 <__udivmodsi4_ep>:
 3e2:	66 1f       	adc	r22, r22
 3e4:	77 1f       	adc	r23, r23
 3e6:	88 1f       	adc	r24, r24
 3e8:	99 1f       	adc	r25, r25
 3ea:	1a 94       	dec	r1
 3ec:	69 f7       	brne	.-38     	; 0x3c8 <__udivmodsi4_loop>
 3ee:	60 95       	com	r22
 3f0:	70 95       	com	r23
 3f2:	80 95       	com	r24
 3f4:	90 95       	com	r25
 3f6:	9b 01       	movw	r18, r22
 3f8:	ac 01       	movw	r20, r24
 3fa:	bd 01       	movw	r22, r26
 3fc:	cf 01       	movw	r24, r30
 3fe:	08 95       	ret

00000400 <toupper>:
 400:	91 11       	cpse	r25, r1
 402:	08 95       	ret
 404:	81 56       	subi	r24, 0x61	; 97
 406:	8a 51       	subi	r24, 0x1A	; 26
 408:	08 f4       	brcc	.+2      	; 0x40c <toupper+0xc>
 40a:	80 52       	subi	r24, 0x20	; 32
 40c:	85 58       	subi	r24, 0x85	; 133
 40e:	08 95       	ret

00000410 <_exit>:
 410:	ff cf       	rjmp	.-2      	; 0x410 <_exit>
